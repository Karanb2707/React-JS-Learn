React Basics: Components

What is a Component?
A component is a reusable piece of code in React, typically written as a JavaScript function.
It represents part of the user interface (UI), like a button, header, form, etc.
Components make it easier to build, manage, and reuse UI elements.

A website or app built with React usually consists of multiple components.
Components can be nested, meaning one component can include others.
Components help break down complex UIs into smaller, manageable pieces.
The architecture of a React app is often built around well-structured components.

........................................................................................................

Why React:

1. Plain JavaScript is manual and repetitive:
Without React, you'd need to manually update the DOM every time something changes 
(like text input, user action, etc.). This becomes hard to manage as your app grows.

2. React makes UI updates automatic:
React uses a virtual DOM, which efficiently updates only the parts of the page that changed.
This leads to faster and smoother performance.

3. Code is cleaner and reusable:
React lets you build apps using components, so your code is modular, reusable, and easier to manage.

4. Easier state management:
React makes it simple to manage data (called state) and keep the UI in sync with it.

5. Strong community and ecosystem:
Huge support, tools, and libraries available for fast development.

SPA : Single Page Application
A Single Page Application (SPA) is a web app that loads a single HTML page and 
dynamically updates content without refreshing the page. It provides a smoother 
user experience by using JavaScript to handle routing and data updates.

...................................................................................................................
props:
In React, props (short for properties) are used to pass data from a parent component to 
a child component. They are read-only and help make components reusable and dynamic.

useState:
useState is a React hook that allows functional components to have and manage state.
It returns an array with two elements: the current state value and a setter function to update it.
When the setter function is called, React re-renders the component with the updated state.
You can initialize the state by passing a default value to useState.
Itâ€™s commonly used for dynamic data like form inputs, toggles, and counters.

useEffect:
useEffect is a React hook that lets you run side effects in functional components, like fetching data or 
updating the DOM.
It runs after the component renders, and you can control when it runs by passing a dependency array.
If the array is empty ([]), it runs only once after the first render.
If you include variables in the array, it runs every time those variables change.
It's useful for tasks like API calls, timers, subscriptions, and syncing with external systems.

